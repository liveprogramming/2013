---
---
References
==========

@article{citeulike:11850493,
    abstract = {An abstract is not available.},
    address = {New York, NY, USA},
    author = {Myers, Brad A. and McDaniel, Richard and Wolber, David},
    citeulike-article-id = {11850493},
    citeulike-linkout-0 = {http://portal.acm.org/citation.cfm?id=330534.330545},
    citeulike-linkout-1 = {http://dx.doi.org/10.1145/330534.330545},
    doi = {10.1145/330534.330545},
    issn = {0001-0782},
    journal = {Commun. ACM},
    keywords = {liveness},
    month = mar,
    number = {3},
    pages = {82--89},
    posted-at = {2012-12-20 01:13:34},
    priority = {0},
    publisher = {ACM},
    title = {Programming by example: intelligence in demonstrational interfaces},
    url = {http://dx.doi.org/10.1145/330534.330545},
    volume = {43},
    year = {2000}
}

@misc{citeulike:11850492,
    author = {Victor, Bret},
    citeulike-article-id = {11850492},
    citeulike-linkout-0 = {http://worrydream.com/LearnableProgramming},
    keywords = {liveness},
    posted-at = {2012-12-20 01:11:54},
    priority = {2},
    title = {Learnable Programming},
    url = {http://worrydream.com/LearnableProgramming},
    year = {2012}
}

@misc{citeulike:11850490,
    abstract = {Software engineering methodologies propose that developers should capture
their efforts in ensuring that programs run correctly in repeatable and
automated artifacts, such as unit tests. However, when looking at developer
activities on a spectrum from exploratory testing to scripted testing we find
that many engineering activities include bursts of exploratory testing. In this
paper we propose to leverage these exploratory testing bursts by automatically
extracting scripted tests from a recording of these sessions. In order to do
so, we wiretap the development environment so we can record all program input,
all user-issued functions calls, and all program output of an exploratory
testing session. We propose to then use machine learning (i.e. clustering) to
extract scripted test cases from these recordings in real-time. We outline two
early-stage prototypes, one for a static and one for a dynamic language. And we
outline how this idea fits into the bigger research direction of programming by
example.},
    archivePrefix = {arXiv},
    author = {Kuhn, Adrian},
    citeulike-article-id = {11850490},
    citeulike-linkout-0 = {http://arxiv.org/abs/1212.1796},
    citeulike-linkout-1 = {http://arxiv.org/pdf/1212.1796},
    day = {8},
    eprint = {1212.1796},
    keywords = {liveness, preprint},
    month = dec,
    posted-at = {2012-12-20 01:08:44},
    priority = {2},
    title = {On Extracting Unit Tests from Interactive Programming Sessions},
    url = {http://arxiv.org/abs/1212.1796},
    year = {2012}
}

@article{Tanimoto90,
    abstract = {Visual languages have been developed to help new programmers express algorithms easily. They also help to make experienced programmers more productive by simplifying the organization of a program through the use of visual representations. However, visual languages have not reached their full potential because of several problems including the following: difficulty of producing visual representations for the more abstract computing constructs; the lack of adequate computing power to update the visual representations in response to user actions; the immaturity of the subfield of visual programming and need for additional breakthroughs and standardization of existing mechanisms. Visualization of Vision Algorithms (VIVA) is a proposed visual language for image processing. Its main purpose is to serve as an effective teaching tool for students of image processing. Its design also takes account of several secondary goals, including the completion of a software platform for research in human/image interaction, the creation of a vehicle for studying algorithms and architectures for parallel image processing, and the establishment of a presentation medium for image-processing algorithms.},
    address = {Orlando, FL, USA},
    author = {Tanimoto, Steven L.},
    citeulike-article-id = {10222801},
    citeulike-linkout-0 = {http://portal.acm.org/citation.cfm?id=1747286},
    citeulike-linkout-1 = {http://dx.doi.org/10.1016/S1045-926X(05)80012-6},
    doi = {10.1016/S1045-926X(05)80012-6},
    issn = {1045-926X},
    journal = {J. Vis. Lang. Comput.},
    keywords = {liveness},
    month = jun,
    pages = {127--139},
    posted-at = {2012-12-20 00:59:15},
    priority = {2},
    publisher = {Academic Press, Inc.},
    title = {VIVA: A visual language for image processing},
    url = {http://dx.doi.org/10.1016/S1045-926X(05)80012-6},
    volume = {1},
    year = {1990}
}

@inproceedings{Church10,
    author = {Church, L. and Nash, C. and Blackwell, A. F.},
    booktitle = {Proceedings of the 22nd Annual Workshop of the Psychology of Programming Interest Group (PPIG 2010)},
    citeulike-article-id = {9760535},
    keywords = {liveness},
    pages = {2--11},
    posted-at = {2012-12-20 00:56:16},
    priority = {0},
    title = {Liveness in notation use: From music to programming},
    year = {2010}
}

@inproceedings{citeulike:4277,
    abstract = {Programmers tend to understand programs by thinking of concrete examples. \&\#60;i>Example Centric Programming\&\#60;/i> seeks to add IDE support for examples throughout the process of programming. Instead of programmers interpreting examples in their head, the examples are written down and the IDE interprets them automatically. Advanced UI techniques are used to present the results closely integrated with the code. Traditionally distinct programming tools (the editor, Read-Eval-Print-Loop, debugger, and test runner) are unified into a single tool that might be called an \&\#60;i>example-enlightened\&\#60;/i> editor. This is expected to benefit a wide spectrum of programming activities, for both novice and experienced programmers. Some novel methods for testing and development are made possible. In the longer term, example centrism has implications for the design of future programming languages. A prototype has been implemented for Java in Eclipse.},
    address = {New York, NY, USA},
    author = {Edwards, Jonathan},
    booktitle = {OOPSLA '04: Companion to the 19th annual ACM SIGPLAN conference on Object-oriented programming systems, languages, and applications},
    citeulike-article-id = {4277},
    citeulike-linkout-0 = {http://sdg.csail.mit.edu/pubs/2004/examplecentric.pdf},
    citeulike-linkout-1 = {http://portal.acm.org/citation.cfm?id=1035292.1028713},
    citeulike-linkout-2 = {http://dx.doi.org/10.1145/1028664.1028713},
    doi = {10.1145/1028664.1028713},
    isbn = {1-58113-833-4},
    keywords = {examples, ide, liveness, novel},
    location = {Vancouver, BC, CANADA},
    pages = {124},
    posted-at = {2009-08-10 14:56:19},
    priority = {0},
    publisher = {ACM},
    title = {Example centric programming},
    url = {http://sdg.csail.mit.edu/pubs/2004/examplecentric.pdf},
    year = {2004}
}

@inproceedings{citeulike:8239560,
    abstract = {An abstract is not available.},
    address = {New York, NY, USA},
    author = {Wilcox, E. M. and Atwood, J. W. and Burnett, M. M. and Cadiz, J. J. and Cook, C. R.},
    booktitle = {Proceedings of the ACM SIGCHI Conference on Human factors in computing systems},
    citeulike-article-id = {8239560},
    citeulike-linkout-0 = {http://portal.acm.org/citation.cfm?id=258549.258721},
    citeulike-linkout-1 = {http://dx.doi.org/10.1145/258549.258721},
    doi = {10.1145/258549.258721},
    isbn = {0-89791-802-9},
    keywords = {liveness},
    location = {Atlanta, Georgia, USA},
    pages = {258--265},
    posted-at = {2013-01-14 04:19:08},
    priority = {2},
    publisher = {ACM},
    series = {CHI '97},
    title = {Does continuous visual feedback aid debugging in direct-manipulation programming systems?},
    url = {http://dx.doi.org/10.1145/258549.258721},
    year = {1997}
}

@inproceedings{citeulike:11894141,
    abstract = {An abstract is not available.},
    address = {Washington, DC, USA},
    author = {Burnett, M. M. and Atwood, J. W. and Welch, Z. T.},
    booktitle = {Proceedings of the IEEE Symposium on Visual Languages},
    citeulike-article-id = {11894141},
    citeulike-linkout-0 = {http://portal.acm.org/citation.cfm?id=834482},
    isbn = {0-8186-8712-6},
    keywords = {liveness},
    posted-at = {2013-01-14 04:17:11},
    priority = {2},
    publisher = {IEEE Computer Society},
    series = {VL '98},
    title = {Implementing Level 4 Liveness in Declarative Visual Programming Languages},
    url = {http://portal.acm.org/citation.cfm?id=834482},
    year = {1998}
}

